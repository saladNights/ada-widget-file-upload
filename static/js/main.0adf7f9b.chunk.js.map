{"version":3,"sources":["App.module.scss","config.js","helpers.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","apiUrl","getFileExtension","filename","split","pop","widgetSDK","require","App","state","isLoading","isActive","s3AccessKeyId","s3UrlExpire","s3SecretAccessKey","bucketName","errorMsgs","initialized","errors","validationErrors","maxFileSize","allowedFileExtensions","undefined","uploadPath","isFileValid","file","currentErrors","size","push","fileExtension","name","includes","length","setState","onChangeHandler","e","preventDefault","widgetIsActive","currentTarget","files","uploadFile","createGetUrl","fileName","s3Key","a","options","params","BucketName","Key","headers","getUrl","axios","get","data","url","contentType","type","ContentType","put","presignedDownloadUrl","sendDataToADA","console","error","sendUserData","fileType","fileSize","this","init","event","metaData","s3_access_key_id","s3_url_expire","s3_secret_access_key","bucket_name","upload_path","chatterToken","max_file_size","allowed_file_extensions","max_file_size_msg","allowed_file_extensions_msg","prevProps","prevState","btnClass","styles","disabledFileUploadBtn","fileUploadBtn","loadingFileUploadBtn","className","wrapper","htmlFor","id","onChange","disabled","btnText","loadingSpinner","errorsWrapper","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0adf7f9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__RCHjb\",\"fileUploadBtn\":\"App_fileUploadBtn__1KiJb\",\"loadingSpinner\":\"App_loadingSpinner__mDfBX\",\"disabledFileUploadBtn\":\"App_disabledFileUploadBtn__12Cq9 App_fileUploadBtn__1KiJb\",\"loadingFileUploadBtn\":\"App_loadingFileUploadBtn__1ws4A App_disabledFileUploadBtn__12Cq9 App_fileUploadBtn__1KiJb\",\"btnText\":\"App_btnText__-PJRh\",\"errorsWrapper\":\"App_errorsWrapper__3VnvC\",\"error\":\"App_error__1LS0k\"};","export const apiUrl = 'https://hidden-everglades-39585.herokuapp.com';","export const getFileExtension = (filename: string) => {\n\treturn filename.split('.').pop();\n}","import React from 'react';\nimport axios from 'axios';\n\nimport { apiUrl } from './config';\nimport { getFileExtension } from './helpers';\n\nimport styles from './App.module.scss';\n\nconst AdaWidgetSDK = require('@ada-support/ada-widget-sdk');\nconst widgetSDK = new AdaWidgetSDK();\n\ninterface IProps {}\n\ninterface IState {\n  isLoading: boolean;\n  isActive: boolean;\n  s3AccessKeyId: string;\n  s3UrlExpire: number;\n  s3SecretAccessKey: string;\n  bucketName: string;\n  errorMsgs: {\n    [key: string]: string;\n  };\n  errors: string[];\n  validationErrors: string[];\n  maxFileSize: number;\n  allowedFileExtensions?: Array<string>;\n  uploadPath: string;\n}\n\nclass App extends React.Component<IProps, IState> {\n  state = {\n    isLoading: false,\n    isActive: false,\n    s3AccessKeyId: '',\n    s3UrlExpire: 86400,\n    s3SecretAccessKey: '',\n    bucketName: '',\n    errorMsgs: {\n      initialized: 'ADA SDK could not be initialized',\n    },\n    errors: [],\n    validationErrors: [],\n    maxFileSize: 10,\n    allowedFileExtensions: undefined,\n    uploadPath: '',\n  };\n\n  componentDidMount() {\n    const { errorMsgs } = this.state;\n\n    try {\n      widgetSDK.init((event: any) => {\n        if (event.type === 'WIDGET_INITIALIZED') {\n          this.setState({\n            isActive: true,\n            s3AccessKeyId: event.metaData?.s3_access_key_id,\n            s3UrlExpire: +event.metaData?.s3_url_expire || 86400,\n            s3SecretAccessKey: event.metaData?.s3_secret_access_key,\n            bucketName: event.metaData?.bucket_name,\n            uploadPath: event.metaData?.upload_path || event.metaData?.chatterToken || 'uploads',\n            maxFileSize: +event.metaData?.max_file_size || 10,\n            allowedFileExtensions: event.metaData?.allowed_file_extensions?.split(', '),\n            errorMsgs: {\n              ...errorMsgs,\n              maxFileSize:\n                event.metaData?.max_file_size_msg\n                || `File size should be less than ${+event.metaData?.max_file_size || 10} Mb`,\n              allowedFileExtensions: event.metaData?.allowed_file_extensions_msg\n                || `File extension should be one of the list: ${event.metaData?.allowed_file_extensions}`,\n            },\n          });\n        }\n      });\n    }\n    catch (e) {\n      this.setState({\n        errors: ['initialized']\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: IProps, prevState: IState) {\n    if (!widgetSDK.widgetIsActive && prevState.isActive) this.setState({ isActive: false });\n  }\n\n  isFileValid = (file: File) => {\n    const { maxFileSize, allowedFileExtensions } = this.state;\n    const currentErrors = [];\n\n    if (file.size > (maxFileSize * 1048576)) {\n      currentErrors.push('maxFileSize');\n    }\n\n    if (allowedFileExtensions) {\n      const fileExtension = getFileExtension(file.name);\n\n      // @ts-ignore\n      if (!allowedFileExtensions.includes(fileExtension)) {\n        currentErrors.push('allowedFileExtensions');\n      }\n    }\n\n    if (currentErrors.length) {\n      this.setState({ validationErrors: currentErrors });\n\n      return false;\n    } else {\n      this.setState({ validationErrors: [] });\n\n      return true;\n    }\n  }\n\n  onChangeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n    const { isLoading, isActive } = this.state;\n    e.preventDefault();\n\n    if (isLoading || !isActive || !widgetSDK.widgetIsActive) return;\n\n    const file = e.currentTarget.files && e.currentTarget.files[0];\n\n    if (file && this.isFileValid(file)) this.uploadFile(file);\n  };\n\n  createGetUrl = async (fileName: string, s3Key: string): Promise<string> => {\n    const {\n      s3AccessKeyId, s3UrlExpire, s3SecretAccessKey, bucketName, uploadPath\n    } = this.state;\n    const options = {\n      params: {\n        BucketName: bucketName,\n        Key: `${uploadPath}/${fileName}`,\n        s3Key,\n        s3UrlExpire,\n      },\n      headers: {\n        'X-S3-P-Key': s3AccessKeyId,\n        'X-S3-S-Key': s3SecretAccessKey,\n      }\n    };\n    let getUrl = '';\n\n    const { data } = await axios.get(\n      `${apiUrl}/presigned-url-get-object`,\n      options,\n    );\n\n    if (data.url) getUrl = data.url;\n\n    return getUrl;\n  };\n\n  uploadFile = async (file: File) => {\n    const {\n      s3AccessKeyId, s3UrlExpire, s3SecretAccessKey, bucketName, uploadPath,\n    } = this.state;\n    const fileName = file.name;\n    const contentType = file.type;\n    const options = {\n      params: {\n        BucketName: bucketName,\n        Key: `${uploadPath}/${fileName}`,\n        ContentType: contentType,\n        s3UrlExpire,\n      },\n      headers: {\n        'Content-Type': contentType,\n        'X-S3-P-Key': s3AccessKeyId,\n        'X-S3-S-Key': s3SecretAccessKey,\n      }\n    };\n\n    this.setState({ isLoading: true });\n\n    try {\n      const { data } = await axios.get(\n        `${apiUrl}/presigned-url-put-object`,\n        options,\n      );\n      try {\n        const { headers } = await axios.put(data.url, file, options);\n        const presignedDownloadUrl = await this.createGetUrl(fileName, headers['x-amz-version-id']);\n\n        this.sendDataToADA(file, headers['x-amz-version-id'], presignedDownloadUrl);\n\n        this.setState({ isLoading: false });\n      } catch (error) {\n        console.error(error);\n        this.setState({\n          isActive: false,\n          isLoading: false,\n        });\n      }\n    } catch (error) {\n      console.error(error);\n      this.setState({\n        isActive: false,\n        isLoading: false,\n      });\n    }\n  };\n\n  sendDataToADA = (file: File, s3Key: string, presignedDownloadUrl: string) => {\n    if (widgetSDK.widgetIsActive) {\n      widgetSDK.sendUserData({\n        fileName: file.name,\n        fileType: file.type,\n        fileSize: file.size,\n        s3Key,\n        presignedDownloadUrl,\n      }, () => {\n        this.setState({ isActive: false });\n      });\n    }\n  };\n\n  render() {\n    const { isLoading, isActive, errorMsgs, errors, validationErrors } = this.state;\n    let btnClass = styles.disabledFileUploadBtn;\n\n    if (isActive) btnClass = styles.fileUploadBtn;\n    if (isLoading) btnClass = styles.loadingFileUploadBtn;\n\n    return (\n      <div className={styles.wrapper}>\n        <label\n          htmlFor='file'\n          className={btnClass}\n        >\n          <input\n            type='file'\n            name='file'\n            id='file'\n            onChange={this.onChangeHandler}\n            disabled={isLoading || !isActive}\n          />\n          <span className={styles.btnText}>Upload File</span>\n          {isLoading && (<div className={styles.loadingSpinner} />)}\n        </label>\n        <div className={styles.errorsWrapper}>\n          {errors.map((error) => (\n            <div key={error} className={styles.error}>{errorMsgs[error]}</div>\n          ))}\n          {validationErrors.map((error) => (\n            <div key={error} className={styles.error}>{errorMsgs[error]}</div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}