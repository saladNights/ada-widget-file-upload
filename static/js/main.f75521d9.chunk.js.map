{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["widgetSDK","require","App","state","getUrl","undefined","errorMsg","onChangeHandler","e","preventDefault","file","currentTarget","files","fileName","name","contentType","type","options","params","Key","ContentType","headers","axios","get","then","response","put","data","url","res","generateGetUrl","sendDataToADA","catch","error","console","log","setState","key","widgetIsActive","sendUserData","fileData","s3Key","event","init","this","className","htmlFor","id","onChange","href","target","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yTAMMA,G,MAAY,IADGC,EAAQ,MA+GdC,E,4MAtGbC,MAAQ,CACNC,YAAQC,EACRC,cAAUD,G,EAgBZE,gBAAkB,SAACC,GACjBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,cAAcC,OAASJ,EAAEG,cAAcC,MAAM,GAE5D,GAAIF,EAAM,CACR,IAAMG,EAAWH,EAAKI,KAChBC,EAAcL,EAAKM,KACnBC,EAAU,CACdC,OAAQ,CAGNC,IAAKN,EACLO,YAAaL,GAEfM,QAAS,CACP,eAAgBN,IAIpBO,IAAMC,IACJ,yEACAN,GAECO,MAAK,SAACC,GACLH,IAAMI,IAAID,EAASE,KAAKC,IAAKlB,EAAMO,GAChCO,MAAK,SAAAK,GACJ,EAAKC,eAAejB,GACpB,EAAKkB,cAAcrB,EAAMmB,EAAIR,QAAQ,wBAEtCW,OAAM,SAACC,GACNC,QAAQC,IAAIF,SAGjBD,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,EAKpBH,eAAiB,SAACjB,GAChB,IAAMI,EAAU,CACdC,OAAQ,CACNC,IAAKN,IAITS,IAAMC,IAAI,yEAA0EN,GACjFO,MAAK,SAACK,GACL,EAAKO,SAAS,CAAEhC,OAAQyB,EAAIF,KAAKC,SAElCI,OAAM,SAACC,GACNC,QAAQC,IAAIF,O,EAIlBF,cAAgB,SAACrB,EAAY2B,GACvBrC,EAAUsC,iBACZJ,QAAQC,IAAI,cAAezB,EAAM2B,GACjCrC,EAAUuC,aAAa,CACrBC,SAAU9B,EACV+B,MAAOJ,IACN,SAACK,GACFR,QAAQC,IAAI,qBACZD,QAAQC,IAAIO,Q,kEA5EhB,IACE1C,EAAU2C,MAAK,SAACD,GACdR,QAAQC,IAAIO,MAIhB,MAAOlC,GACL0B,QAAQD,MAAM,oCACdW,KAAKR,SAAS,CAAE9B,SAAU,wC,+BAyEpB,IAAD,EACsBsC,KAAKzC,MAA1BC,EADD,EACCA,OAAQE,EADT,EACSA,SAChB,OACE,yBAAKuC,UAAU,WACb,2BAAOC,QAAQ,OAAOD,UAAU,sBAC9B,2BAAO7B,KAAK,OAAOF,KAAK,OAAOiC,GAAG,OAAOC,SAAUJ,KAAKrC,kBAD1D,eAICD,GAAa,yBAAKuC,UAAU,SAASvC,GACrCF,GAAW,uBAAG6C,KAAM7C,EAAQ8C,OAAO,SAASC,IAAI,sBAAsBN,UAAU,iBAArE,iB,GAjGFO,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdpC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoC,c","file":"static/js/main.f75521d9.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport './App.scss';\n\nconst AdaWidgetSDK = require(\"@ada-support/ada-widget-sdk\");\nconst widgetSDK = new AdaWidgetSDK();\n\ninterface IState {\n  getUrl?: string;\n  errorMsg?: string;\n}\n\nclass App extends React.Component<{}, IState> {\n  state = {\n    getUrl: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    try {\n      widgetSDK.init((event: any) => {\n        console.log(event);\n      });\n    }\n    \n    catch (e) {\n      console.error('ADA SDK could not be initialized');\n      this.setState({ errorMsg: 'ADA SDK could not be initialized' });\n    }\n  }\n\n  onChangeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    const file = e.currentTarget.files && e.currentTarget.files[0];\n\n    if (file) {\n      const fileName = file.name;\n      const contentType = file.type;\n      const options = {\n        params: {\n          // TODO there should be some user specific data. send it to server also\n          // Key: `user/${fileName}`,\n          Key: fileName,\n          ContentType: contentType\n        },\n        headers: {\n          'Content-Type': contentType\n        }\n      };\n\n      axios.get(\n        'https://hidden-everglades-39585.herokuapp.com/presigned-url-put-object',\n        options,\n      )\n        .then((response) => {\n          axios.put(response.data.url, file, options)\n            .then(res => {\n              this.generateGetUrl(fileName);\n              this.sendDataToADA(file, res.headers['x-amz-version-id']);\n            })\n            .catch((error) => {\n              console.log(error);\n            })\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  generateGetUrl = (fileName: string) => {\n    const options = {\n      params: {\n        Key: fileName,\n      }\n    };\n\n    axios.get('https://hidden-everglades-39585.herokuapp.com/presigned-url-get-object', options)\n      .then((res) => {\n        this.setState({ getUrl: res.data.url });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  sendDataToADA = (file: File, key: string) => {\n    if (widgetSDK.widgetIsActive) {\n      console.log('send to ADA', file, key);\n      widgetSDK.sendUserData({\n        fileData: file,\n        s3Key: key\n      }, (event: any) => {\n        console.log('successfully sent');\n        console.log(event);\n      });\n    }\n  };\n\n  render() {\n    const { getUrl, errorMsg } = this.state;\n    return (\n      <div className='wrapper'>\n        <label htmlFor='file' className='custom-file-upload'>\n          <input type='file' name='file' id='file' onChange={this.onChangeHandler}/>\n          Upload File\n        </label>\n        {errorMsg && (<div className='error'>{errorMsg}</div>)}\n        {getUrl && (<a href={getUrl} target='_blank' rel='noopener noreferrer' className='download-link'>Download</a>)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}